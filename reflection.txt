AJAX:
AJAX stands for Asynchronous JavaScript and XML, uses the XMLHttpRequest object or the Fetch API to issue requests to the server, sends back response.
Steps in AJAX
1. Some event happens on a webpage. For instance, the page loads, or a user clicks on a particular button.
2. JavaScript creates an XMLHttpRequest object.	
3. This object sends a request to the corresponding web server.  	
4. The server processes the request and sends a response back to the browser.	
5. JavaScript reads the response.
6. JavaScript performs the proper action, depending on the triggering event.


Ex: 
const xhr = new XMLHttpRequest();
xhr.responseType = 'json';
xhr.open('GET', '../data/team.json');
xhr.send();
xhr.addEventListener('readystatechange', () => {
    if (xhr.readyState == 4 && xhr.status == 200) {
        let employees = xhr.response;
        for (let employee of employees) {
            document.body.innerHTML += `${employee.name}<br>${employee.title}<br><br>`;
        }
    }
});
xhr.onerror = (e) => {console.error(e.message)};

Promise: 
A promise is an object that may produce a single value some time in the future: either a resolved value, or a reason that itâ€™s not resolved.
A promise can be in one of the 3 possible states: pending, ful-filled, rejected.

Fetch API will return Promise objects.

fetch(url)
	.the(response =. response.json())
	.then(....iterate over the data)
	.catch(e => console.log(e.message))

Async / Await
We use async keyword to wrap the return value of that function in a Promise object.
The await keyword tells JavaScript to wait until a promise is settled and then return its result. It can only be used in asynchronous functions. 

async fetchUsers = () => {
 const response = await fetch('https://jsonplaceholder.typicode.com/users')
 const users = await response.json()
 for (let user of users) {
 	document.body.innerHTML += `${user.name}<br>${user.email}<br><br>`
 }
}


